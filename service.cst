<%@ CodeTemplate Language="C#" TargetLanguage="Java" Src="CodeBehindClass.cs" Inherits="CodeBehindClass" ResponseEncoding="UTF-8" Encoding="utf-8"%>
<%-- 
Name:
Author: march3
Description: 
--%>
<%-- Assembly References --%>
<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%-- Namespace Imports --%>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>

<%@ Map Name="JavaAlias" Src="mysql-java-alias" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="只能选择一个表." %>
<%
ColumnSchema pkCol = GetPrimaryKey(SourceTable);
List<ColumnSchema> uniqueColumns = GetUniqueColumns(SourceTable);
%>
package <%=ServicePackage%>;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import <%=ModelPackage%>.<%=GetDomainClassName()%>;
import <%=MapperJavaPackage%>.<%=GetDomainClassName()%>Mapper;

@Service
public class <%=GetDomainClassName()%>Service {
    
	@Autowired
    private <%=GetDomainClassName()%>Mapper mapper;

    public int insert(<%=GetDomainClassName()%> <%=GetDomainVariableName()%>){
        return mapper.insert(<%=GetDomainVariableName()%>);
    }
  
    public int update(<%=GetDomainClassName()%> <%=GetDomainVariableName()%>){       
        return mapper.update(<%=GetDomainVariableName()%>);      
    }
  
    public int delete(<%=GetJavaType(pkCol)%> <%=GetCamelCaseName(pkCol)%>){
        return mapper.delete(<%=GetCamelCaseName(pkCol)%>);
    }
  
    public <%=GetDomainClassName()%> get(<%=GetJavaType(pkCol)%> <%=GetCamelCaseName(pkCol)%>){
        return mapper.get(<%=GetCamelCaseName(pkCol)%>);
    }  
    
    public List<<%=GetDomainClassName()%>> getIn<%=GetPascalCaseName(pkCol)%>s(List<<%=GetJavaType(pkCol)%>> <%=GetCamelCaseName(pkCol)%>s){
        return mapper.getIn<%=GetPascalCaseName(pkCol)%>s(<%=GetCamelCaseName(pkCol)%>s);
    }  
    
    <% foreach(var col in uniqueColumns) {%>
    /**
     * 根据 <%=GetCamelCaseName(col)%> 获取
     * @param <%=GetCamelCaseName(col)%>
     * @return
     */
    public <%=GetDomainClassName()%> getBy<%=GetPascalCaseName(col)%>(<%=GetJavaType(col)%> <%=GetCamelCaseName(col)%>){
        return mapper.getBy<%=GetPascalCaseName(col)%>(<%=GetCamelCaseName(col)%>);
    }
    <%}%>
    
    <% foreach(var col in uniqueColumns) {%>
    /**
     * 根据 <%=GetCamelCaseName(col)%>s in 获取列表
     * @param <%=GetCamelCaseName(col)%>s
     * @return
     */
    public List<<%=GetDomainClassName()%>> getIn<%=GetPascalCaseName(col)%>s(List<<%=GetJavaType(col)%>> <%=GetCamelCaseName(col)%>s){
        return mapper.getIn<%=GetPascalCaseName(col)%>s(<%=GetCamelCaseName(col)%>s);
    }
    <%}%>
    
    public List<<%=GetDomainClassName()%>> getAll(){
        return mapper.getAll();
    }
}
<script runat="template">
    public override string GetFileName() {
        return GetDomainClassName() + "Mapper.java";
    }
    
    public string GetDomainClassName() {
        return GetPascalCaseName(SourceTable);
    }
    
    public string GetDomainVariableName() {
        return GetCamelCaseName(SourceTable);
    }
    
    public string GetJavaType(ColumnSchema col) {
        try{           
            return JavaAlias[col.NativeType];
        }catch(Exception ex){
            //Response.Write(col.NativeType.ToString()+ex.Message);
            return col.NativeType + "["+col.NativeType.ToString()+"]";
        }
    }
</script>