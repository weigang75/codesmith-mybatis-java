<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" Encoding="utf-8" TargetLanguage="Text" Src="CodeBehindClass.cs" Inherits="CodeBehindClass" Debug="True" CompilerVersion="v3.5"%>
<%-- 
Name:
Author: march3
Description: 
--%>
<%-- Assembly References --%>
<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%-- Namespace Imports --%>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>

<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="02.数据库" Optional="False" Description="选择要连接的数据库" %> 
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="False" Category="02.数据库" Description="选择要生成代码的表" Filter="SourceDatabase"%>
<%@ Property Name="ModuleName" Type="String" Category="01.项目信息" Optional="False" Description="模块名称" %> 

<%@ Register Name="ModelAll" Template="model-all.cst" %>
<%@ Register Name="MapperJavaAll" Template="mapper-java-all.cst" %>
<%@ Register Name="MapperXmlAll" Template="mapper-xml-all.cst" %>
<%@ Register Name="ServiceAll" Template="service-all.cst" %>
<%@ Register Name="ServiceTestAll" Template="service-test-all.cst" %>


<%
    if(SourceDatabase != null)
    {     
        Response.WriteLine("输出开始.......");
        
        RenderMapperXml(ExcludedTables).Render(this.Response);   
        RenderModel(ExcludedTables).Render(this.Response);
        RenderMapperJava(ExcludedTables).Render(this.Response);
        RenderService(ExcludedTables).Render(this.Response);
        RenderServiceTest(ExcludedTables).Render(this.Response);

        Response.WriteLine("全部已经输出成功");
    }
    string output = OutputDirectory;
    RemoveUtf8Bom(output);
%>
<script runat="template">
private CodeBehindClass setCommonProperties(CodeBehindClass template){
    template.NameSpace = NameSpace + "." + ModuleName;
    template.Author = Author;
    template.OutputDirectory = OutputDirectory;
    template.TablePrefix = TablePrefix; 
    return template;
}

private CodeBehindClass RenderModel(TableSchemaCollection tables)
{
	ModelAll pojo = this.Create<ModelAll>();
	pojo.SourceTables = tables;    
    return setCommonProperties(pojo);
}

private CodeBehindClass RenderMapperJava(TableSchemaCollection tables)
{
	MapperJavaAll pojo = this.Create<MapperJavaAll>();
    pojo.SourceTables = tables;    
    return setCommonProperties(pojo);
}

private CodeBehindClass RenderMapperXml(TableSchemaCollection tables)
{
	MapperXmlAll pojo = this.Create<MapperXmlAll>();
    pojo.SourceTables = tables;    
    return setCommonProperties(pojo);
}

private CodeBehindClass RenderService(TableSchemaCollection tables)
{
	ServiceAll pojo = this.Create<ServiceAll>();
    pojo.SourceTables = tables;    
    return setCommonProperties(pojo);
}

private CodeBehindClass RenderServiceTest(TableSchemaCollection tables)
{
	ServiceTestAll pojo = this.Create<ServiceTestAll>();
    pojo.SourceTables = tables;    
    return setCommonProperties(pojo);
}

</script>