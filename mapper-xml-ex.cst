<%@ CodeTemplate Language="C#" TargetLanguage="XML" Src="CodeBehindClass.cs" Inherits="CodeBehindClass" ResponseEncoding="UTF-8" Encoding="utf-8"%>
<%-- 
Name:
Author: march3
Description: Mybatis Mapper XML GENERATE TEMPLATE FOR FWEB（FOREVER WEB RAPID FRAMEWORK）
--%>
<%-- Assembly References --%>
<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%-- Namespace Imports --%>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>

<%@ Map Name="JavaAlias" Src="mysql-java-alias" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="只能选择一个表." %>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<%
// 该模板要求源数据表有主键
if (!SourceTable.HasPrimaryKey) throw new ApplicationException("["+SourceTable.Name + "]不包含主键.");
if (SourceTable.PrimaryKeys.Count > 1) throw new ApplicationException("["+SourceTable.Name + "]不能包含多个主键.");

string MapName = GetPascalCaseName(SourceTable)+"Map";
string typeFullName = ModelPackage + "." + GetPascalCaseName(SourceTable);

ColumnSchema pkCol = GetPrimaryKey(SourceTable);
List<ColumnSchema> uniqueColumns = GetUniqueColumns(SourceTable);
ColumnSchema deleteCol = GetDeleteFlagColumn(SourceTable);
/*
foreach(ColumnSchema col in SourceTable.Columns) {  
    for(int i=0;i<col.ExtendedProperties.Count;i++){
        if(col.IsPrimaryKeyMember){
            pkCol = col;
            break;
        }
        //Response.WriteLine(col.FullName + " pk:" + col.IsPrimaryKeyMember + ":" + col.ExtendedProperties[i].Name + "=" + col.ExtendedProperties[i].Value);
    }
    if(pkCol != null)
        break;
}
*/
//Response.Write(pkCol.FullName);
//Response.Write(pkCol.ExtendedProperties["CS_IsIdentity"].Value);
bool isIdentity = false;
if(pkCol != null)
    isIdentity = Boolean.Parse(pkCol.ExtendedProperties["CS_IsIdentity"].Value.ToString());
//Response.Write(isIdentity);
int idx = 0;
%>
<mapper namespace="<%=MapperJavaPackage%>.<%=GetDomainClassName()%>Mapper">
<!-- 自定义扩展写在这里 -->

</mapper>

<script runat="template">
    public string GetJavaType(ColumnSchema col) {
        try{           
            return JavaAlias[col.NativeType];
        }catch(Exception ex){
            //Response.Write(col.NativeType.ToString()+ex.Message);
            return col.NativeType + "["+col.NativeType.ToString()+"]";
        }
    }

    public override string GetFileName() {
        return GetDomainClassName() + MapperXmlPostfix;// "Mapper.xml";
    }
    
    public string GetDomainClassName() {
        return GetPascalCaseName(SourceTable);
    }
    
    public string GetInsertSQL()
    {
    	string f = string.Empty;
    	string v = string.Empty;
        
        foreach(ColumnSchema col in SourceTable.Columns)
        {
            if(col.Name.ToUpper().Equals(VersionColName)) continue;
            
            if(IsIdentity(col))continue;
            
            f += col.Name + ", ";
            v += "#{" + StringUtil.ToCamelCase(col.Name) + "}, ";
        }
    	
    	return string.Format("INSERT INTO {0}({1}) VALUES ( {2} )", SourceTable.Name, f.Trim().TrimEnd(','),  v.Trim().TrimEnd(','));
    }

    

    public string GetUpdateSQL(ColumnSchema pkCol)
    {
    	string s = string.Empty;
        
        foreach(ColumnSchema col in SourceTable.Columns)
        {
            if(col.Name.ToUpper() == pkCol.Name.ToUpper()) {
                continue;
            }
            
            if(col.Name.ToUpper().Equals(VersionColName)) {
                s += " "+VersionColName+" = "+VersionColName+" + 1, ";
                continue;
            }
            
            s += string.Format("{0} = #{{{1}}}, ", col.Name, StringUtil.ToCamelCase(col.Name));
        }
        

    	return string.Format("UPDATE {0} SET {1} WHERE {2} ", SourceTable.Name, s.Trim().TrimEnd(','),pkCol.Name)+"= #{"+GetCamelCaseName(pkCol)+"}";
    }
    
    
    public string GetSelectFields()
    {
    	string s = string.Empty;
        
        foreach(ColumnSchema col in SourceTable.Columns)
        {
            String colName = col.Name;
            String fieldName = StringUtil.ToPascalCase(col.Name);
            if(colName.Equals(fieldName))
                s += string.Format("_t.{0}, ", colName);
            else
                s += string.Format("_t.{0} as {1}, ", colName, fieldName);
        }
    	
    	return s.Trim().TrimEnd(',');
    }
    
    
    public string GenerateResultColumn(ColumnSchema column)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        if(column.IsPrimaryKeyMember){
            sb.Append("<id column=\"");
        }else{
            sb.Append("<result column=\"");
        }    	
    	sb.Append(column.Name);
        
        sb.Append("\" jdbcType=\"");
    	sb.Append(GetJdbcType(column));
        
    	sb.Append("\" property=\"");
    	sb.Append(StringUtil.ToCamelCase(column.Name));
        
    	sb.Append("\" />");
        return sb.ToString();
    }

    public void GenerateResultColumns(ColumnSchemaCollection columns)
    {
        System.Text.StringBuilder sbIdCol = new System.Text.StringBuilder();
        System.Text.StringBuilder sbCols = new System.Text.StringBuilder();
        
    	ColumnSchemaCollection filteredColumns = columns;//FilterExcludedColumns(columns);
    	Response.WriteLine();
    	for (int i = 0; i < filteredColumns.Count; i++)
    	{
            String str = GenerateResultColumn(filteredColumns[i]);
            if(filteredColumns[i].IsPrimaryKeyMember){
                sbIdCol.Append(GetIndent(2));
                sbIdCol.Append(str);
                sbIdCol.AppendLine();
               
            }else{
                sbCols.Append(GetIndent(2));
                sbCols.Append(str); 
                sbCols.AppendLine();
            }
    	}
        Response.Write(sbIdCol.ToString());
        Response.Write(sbCols.ToString());
        GenerateIndent(1);
    }
</script>