<%@ CodeTemplate Language="C#" TargetLanguage="Java" Src="CodeBehindClass.cs" Inherits="CodeBehindClass" ResponseEncoding="UTF-8" Encoding="utf-8"%>
<%-- 
Name:
Author: march3
Description: 
--%>
<%-- Assembly References --%>
<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%-- Namespace Imports --%>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>

<%@ Map Name="JavaAlias" Src="mysql-java-alias" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="只能选择一个表." %>
<%
string modelName = GetCamelCaseName(SourceTable);
%>
package <%=ModelPackage%>;
/**
 * @ <%=Author%> create in <%=System.DateTime.Now%> by Template
 * This class generated by Forever Web Rapid Framework Code Generator
 */
import java.io.Serializable;
import java.text.MessageFormat;
import java.util.Date;

/**
 * 数据表： [<%=SourceTable.Name%>]
 * <%=SourceTable.Description %>
 */
public class <%=GetClassName()%> implements Serializable {
	/**
	 * 默认构造函数
	 */
	public <%=GetClassName()%>() {
        <%foreach(ColumnSchema col in SourceTable.Columns){ 
            if(GetJavaType(col) == "Date") {%>this.<%=StringUtil.ToCamelCase(col.Name)%> = new Date(0);<%}
        } %>
	}
    
	public <%=GetClassName()%>(<%=GetClassName()%> <%=modelName%>) {       
        <%foreach(ColumnSchema col in SourceTable.Columns){
            string propName = StringUtil.ToPascalCase(col.Name);
        %>
        this.set<%=propName %>(<%=modelName%>.get<%=propName %>());
        <%}%>
	}   

	<%
	foreach(ColumnSchema col in SourceTable.Columns)
	{
	%>    
    /**
     * <%= col.Description %>
     */
    private <%=GetJavaType(col)%> <%=StringUtil.ToCamelCase(col.Name)%>;
      
    <%}%>
    
    <%
	foreach(ColumnSchema col in SourceTable.Columns)
	{
	%>
	/**
	 * 获取<%= col.Description %>
	 */
	public <%=GetJavaType(col)%> get<%= StringUtil.ToPascalCase(col.Name) %> () {
		return <%=StringUtil.ToCamelCase(col.Name)%>;
	}

	/**
	 * 设置<%= col.Description %>
	 */
	public void set<%= StringUtil.ToPascalCase(col.Name) %>(<%=GetJavaType(col)%> <%=StringUtil.ToCamelCase(col.Name)%>) {
		this.<%=StringUtil.ToCamelCase(col.Name)%> = <%=StringUtil.ToCamelCase(col.Name)%>;
	}
    <%}%>
    
	@Override
	public String toString() {
		System.out.println(this.getClass().getName() + ".toString():");
        
        StringBuilder sbStr = new StringBuilder();<%
		foreach(ColumnSchema col in SourceTable.Columns)
		{%>
        sbStr.append(MessageFormat.format("<%= StringUtil.ToPascalCase(col.Name) %>=\"{0}\",", this.get<%= StringUtil.ToPascalCase(col.Name) %>()));<%}%>;
        return sbStr.toString();
                        
	}
}

<script runat="template">
    public string GetJavaType(ColumnSchema col) {
        try{           
            return JavaAlias[col.NativeType];
        }catch(Exception ex){
            //Response.Write(col.NativeType.ToString()+ex.Message);
            return col.NativeType + "["+col.NativeType.ToString()+"]";
        }
    }
    public override string GetFileName() {
        return GetPascalCaseName(SourceTable) + ".java";
    }
    
    public string GetClassName() {
        return GetPascalCaseName(SourceTable);
    }   

</script>